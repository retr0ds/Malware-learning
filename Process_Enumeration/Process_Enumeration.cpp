// Process_Enumeration.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include <Windows.h>
#include <TlHelp32.h> 
#include <tchar.h>
#include <wchar.h>

PROCESSENTRY32W Process = {
    Process.dwSize = sizeof(PROCESSENTRY32W)
};


void printinfo(IN PROCESSENTRY32W Process) {
    printf("\n\n=====================================================");
    wprintf(L"\n PROCESS NAME    : %s", Process.szExeFile);
    printf("\n PROCESS ID        : %d", Process.th32ProcessID);
    printf("\n THREAD COUNT      : %d", Process.cntThreads);
    printf("\n PARENT PROCESS ID : %d", Process.th32ParentProcessID);
    printf("\n Priority Base     : %d", Process.pcPriClassBase);
    printf("\n");
}


int Process_Enum(IN char choice) {

    int pid;
    wchar_t Process_Name[MAX_PATH];
    HANDLE  Snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);
    

    if (Snapshot == INVALID_HANDLE_VALUE) {
        printf("[*] CreateToolhelp32 Failed");
    }


    if (!Process32FirstW(Snapshot, &Process)) {
        printf("[*] Process32First Ffailed ");
    }


    if (choice == 'X') {
        do {
            wprintf(L"\nPROCESS NAME : %-40s PID : %d", Process.szExeFile, Process.th32ProcessID);
        } while (Process32NextW(Snapshot, &Process));
    }


    else if (choice == 'P') {
        printf("\nEnter Process ID : ");
        scanf_s("%d", &pid);
        do {

            if (Process.th32ProcessID == pid) {
                printinfo(Process);
            }
        } while (Process32NextW(Snapshot, &Process));
    }


    else if (choice == 'N') {
        printf("\nEnter Process Name [only in lowercase]: ");
        wscanf_s(L"%ls", Process_Name);
        do {
            WCHAR lowercase[MAX_PATH * 2];
            if (Process.szExeFile) {
                DWORD	dwSize = lstrlenW(Process.szExeFile);
                DWORD   i = 0;

                RtlSecureZeroMemory(lowercase, MAX_PATH * 2);

                if (dwSize < MAX_PATH * 2) {

                    for (; i < dwSize; i++)
                        lowercase[i] = (WCHAR)tolower(Process.szExeFile[i]);

                    lowercase[i++] = '\0';
                }
            }
            if (!wcscmp(lowercase, Process_Name)){
                printinfo(Process);
            }
        } while (Process32NextW(Snapshot, &Process));
    }


    else if (choice == 'A') {
        do {
            printinfo(Process);
        } while (Process32NextW(Snapshot, &Process));
    }


    return 0;
}


int main()
{
    char choice;
    printf("PROCESS ENUMERATION\n");
    printf("To print all process Names and PID       : [X] \n");
    printf("To print a process details by it's PID   : [P] \n");
    printf("To print a process deatils by it's name  : [N] \n");
    printf("To print all process details             : [A] \n");
    printf("Enter choice X/P/N/A : ");
    std::cin >> choice;
    Process_Enum(choice);
    
    printf("\n\n[*] Press Any key to exit");
    getchar();
    getchar();
    return 0;
}

